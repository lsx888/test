<!DOCTYPE HTML>
<!-- saved from url=(0095)http://172.13.19.31:6060/note_html/服务器/CentOS/11010-shell-循环控制（for、while、until）.html -->
<!DOCTYPE html PUBLIC "" ""><HTML><HEAD><META content="IE=11.0000" 
http-equiv="X-UA-Compatible">
 
<META http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
<TITLE>shell-循环控制（for、while、until）</TITLE> <LINK href="shell-循环控制（for、while、until）_files/standalone.css" 
rel="stylesheet"> <LINK href="shell-循环控制（for、while、until）_files/overlay-apple.css" 
rel="stylesheet"> <LINK href="shell-循环控制（for、while、until）_files/article_edit.css" 
rel="stylesheet"> 
<STYLE type="text/css">
	#content{
		margin: 5px 10px;
	}
</STYLE>
	 <!-- 代码高亮 -->	 <LINK href="shell-循环控制（for、while、until）_files/shCoreEclipse.css" 
rel="stylesheet">	 <LINK href="shell-循环控制（for、while、until）_files/my-highlighter.css" 
rel="stylesheet"> 
<META name="GENERATOR" content="MSHTML 11.00.10586.545"></HEAD> 
<BODY>
<DIV id="content">
<H1 align="center">shell-循环控制（for、while、until）</H1>
<P align="right" 
style="margin: 0px 10px 0px 0px; padding: 0px;">最后修改时间：2015-09-07 14:18:35</P>
<HR style="border-width: 2px; border-color: lime;">

<H3>for语句</H3>
<H4>语法</H4>
<PRE class="brush: bash;">for循环一般格式为：

for 变量 in 列表
do
    command1
    command2
    ...
    commandN
done

列表是一组值（数字、字符串等）组成的序列，每个值通过空格分隔。每循环一次，就将列表中的下一个值赋给变量。

in 列表是可选的，如果不用它，for 循环使用命令行的位置参数
</PRE>
<H4>使用实例</H4>
<PRE class="brush: bash;">顺序输出当前列表中的数字：

    for loop in 1 2 3 4 5
    do
        echo "The value is: $loop"
    done

运行结果：

The value is: 1
The value is: 2
The value is: 3
The value is: 4
The value is: 5


顺序输出字符串中的字符：

    for str in 'This is a string'
    do
        echo $str
    done

运行结果：

This is a string


显示主目录下以 .bash 开头的文件：

复制纯文本新窗口

    #!/bin/bash
    for FILE in $HOME/.bash*
    do
       echo $FILE
    done

运行结果：

/root/.bash_history
/root/.bash_logout
/root/.bash_profile
/root/.bashrc
</PRE>
<H3>while语句</H3>
<H4>语法</H4>
<PRE class="brush: bash;">while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：

while command
do
   Statement(s) to be executed if command is true
done

命令执行完毕，控制返回循环顶部，从头开始直至测试条件为假
</PRE>
<H4>使用实例</H4>
<PRE class="brush: bash;">以下是一个基本的while循环，测试条件是：如果COUNTER小于5，那么返回 true。COUNTER从0开始，每次循环处理时，COUNTER加1。运行上述脚本，返回数字1到5，然后终止。

    COUNTER=0
    while [ $COUNTER -lt 5 ]
    do
        COUNTER='expr $COUNTER+1'
        echo $COUNTER
    done

运行脚本，输出：

1
2
3
4
5


while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按&lt;ctrl-d&gt;结束循环。

    echo 'type &lt;ctrl-d&gt; to terminate'
    echo -n 'enter your most liked film: '
    while read FILM
    do
        echo "Yeah! great film the $FILM"
    done

运行脚本，输出类似下面：

type &lt;ctrl-d&gt; to terminate
enter your most liked film: Sound of Music
Yeah! great film the Sound of Music
</PRE>
<H3>until语句</H3>
<H4>语法</H4>
<PRE class="brush: bash;">until 循环执行一系列命令直至条件为 true 时停止。until 循环与 while 循环在处理方式上刚好相反。一般while循环优于until循环，但在某些时候，也只是极少数情况下，until 循环更加有用。

until 循环格式为：

until command
do
   Statement(s) to be executed until command is true
done

command 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环
</PRE>
<H4>使用实例</H4>
<PRE class="brush: bash;">使用 until 命令输出 0 ~ 9 的数字：

    #!/bin/bash
    a=0
    until [ ! $a -lt 10 ]
    do
       echo $a
       a=`expr $a + 1`
    done

运行结果：

0
1
2
3
4
5
6
7
8
9
</PRE>
<H3>跳出循环</H3>
<H4>brake</H4>
<PRE class="brush: bash;">break命令允许跳出所有循环（终止执行后面的所有循环）。

下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，就要使用break命令。

    #!/bin/bash
    while :
    do
        echo -n "Input a number between 1 to 5: "
        read aNum
        case $aNum in
            1|2|3|4|5) echo "Your number is $aNum!"
            ;;
            *) echo "You do not select a number between 1 to 5, game is over!"
                break
            ;;
        esac
    done

在嵌套循环中，break 命令后面还可以跟一个整数，表示跳出第几层循环。例如：

    break n

表示跳出第 n 层循环。

下面是一个嵌套循环的例子，如果 var1 等于 2，并且 var2 等于 0，就跳出循环：

    #!/bin/bash
    for var1 in 1 2 3
    do
       for var2 in 0 5
       do
          if [ $var1 -eq 2 -a $var2 -eq 0 ]
          then
             break 2
          else
             echo "$var1 $var2"
          fi
       done
    done

如上，break 2 表示直接跳出外层循环。运行结果：

1 0
1 5
</PRE>
<H4>continue</H4>
<PRE class="brush: bash;">continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。

对上面的例子进行修改：

    #!/bin/bash
    while :
    do
        echo -n "Input a number between 1 to 5: "
        read aNum
        case $aNum in
            1|2|3|4|5) echo "Your number is $aNum!"
            ;;
            *) echo "You do not select a number between 1 to 5!"
                continue
                echo "Game is over!"
            ;;
        esac
    done

运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句

    echo "Game is over!"

永远不会被执行。

同样，continue 后面也可以跟一个数字，表示跳出第几层循环。

再看一个 continue 的例子：

    #!/bin/bash
    NUMS="1 2 3 4 5 6 7"
    for NUM in $NUMS
    do
       Q=`expr $NUM % 2`
       if [ $Q -eq 0 ]
       then
          echo "Number is an even number!!"
          continue
       fi
       echo "Found odd number"
    done

运行结果：

Found odd number
Number is an even number!!
Found odd number
Number is an even number!!
Found odd number
Number is an even number!!
Found odd number
</PRE>
<HR style="border-width: 2px; border-color: lime;">

<DIV align="center">©copyright 版权所有   作者：zzy</DIV>
<SCRIPT src="../../pub/syntaxhighlighter/scripts/shCore.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="../../pub/syntaxhighlighter/scripts/shBrushJava.js" type="text/javascript"></SCRIPT>
	
<SCRIPT src="../../pub/syntaxhighlighter/scripts/shBrushJScript.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="../../pub/syntaxhighlighter/scripts/shBrushXml.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="../../pub/syntaxhighlighter/scripts/shBrushSql.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="../../pub/syntaxhighlighter/scripts/shBrushBash.js" type="text/javascript"></SCRIPT>
	
<SCRIPT src="../../pub/syntaxhighlighter/init.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="../../pub/js/jquery.tools.min.js" type="text/javascript"></SCRIPT>
 <!-- make all links with the 'rel' attribute open overlays --> 
<SCRIPT>
  $(function() {
      $("#apple img[rel]").overlay({effect: 'apple'});
    });
</SCRIPT>
 </DIV></BODY></HTML>
